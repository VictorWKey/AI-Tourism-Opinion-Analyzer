def mostrar_metricas_detalladas(metrics, dataset_chars):
    """
    Muestra un resumen detallado de todas las m√©tricas calculadas
    """
    print(f"üìä M√âTRICAS DETALLADAS DE COHERENCIA DE T√ìPICOS")
    print(f"=" * 60)
    
    # Informaci√≥n del dataset
    print(f"\nüìÅ INFORMACI√ìN DEL DATASET:")
    print(f"   ‚Ä¢ Documentos: {dataset_chars['num_docs']:,}")
    print(f"   ‚Ä¢ Vocabulario: {dataset_chars['vocab_size']:,} palabras √∫nicas")
    print(f"   ‚Ä¢ Diversidad l√©xica: {dataset_chars['lexical_diversity']:.4f}")
    print(f"   ‚Ä¢ Ratio de duplicados: {dataset_chars['duplicate_ratio']:.2%}")
    
    # M√©tricas de separaci√≥n
    print(f"\nüéØ SEPARACI√ìN DE CLUSTERS:")
    print(f"   ‚Ä¢ Silhouette Score: {metrics['silhouette_score']:.4f}")
    print(f"   ‚Ä¢ Cobertura: {metrics['coverage']:.2%}")
    
    # M√©tricas de diversidad
    print(f"\nüåà DIVERSIDAD:")
    print(f"   ‚Ä¢ Diversidad l√©xica: {metrics['topic_diversity']:.4f}")
    print(f"   ‚Ä¢ Diversidad sem√°ntica: {metrics['semantic_diversity']:.4f}")
    
    # M√©tricas de coherencia est√°ndar
    print(f"\nüß† COHERENCIA EST√ÅNDAR (Gensim):")
    coherence_metrics = [
        ('CV (Ventana deslizante)', metrics['coherence_cv']),
        ('NPMI (Mutual Information)', metrics['coherence_npmi'])
    ]
    
    for name, value in coherence_metrics:
        if value != -1:
            status = "‚úÖ" if value > 0.3 else "‚ö†Ô∏è" if value > 0.1 else "‚ùå"
            print(f"   ‚Ä¢ {name}: {value:.4f} {status}")
        else:
            print(f"   ‚Ä¢ {name}: No calculada ‚ùå")
    
    # Informaci√≥n de t√≥picos
    print(f"\nüìà INFORMACI√ìN DE T√ìPICOS:")
    print(f"   ‚Ä¢ N√∫mero de t√≥picos: {metrics['num_topics']}")
    print(f"   ‚Ä¢ Tama√±o promedio: {metrics['avg_topic_size']:.1f} documentos")
    
    # Interpretaci√≥n de resultados
    print(f"\nüí° INTERPRETACI√ìN:")
    
    # Evaluar calidad general
    valid_coherences = [v for v in [metrics['coherence_cv'], metrics['coherence_npmi']] if v > 0]
    
    if valid_coherences:
        avg_coherence = np.mean(valid_coherences)
        if avg_coherence > 0.4:
            quality = "Excelente ‚≠ê‚≠ê‚≠ê"
        elif avg_coherence > 0.25:
            quality = "Buena ‚≠ê‚≠ê"
        elif avg_coherence > 0.1:
            quality = "Aceptable ‚≠ê"
        else:
            quality = "Necesita mejoras ‚ö†Ô∏è"
        
        print(f"   ‚Ä¢ Calidad general: {quality}")
        print(f"   ‚Ä¢ Coherencia promedio: {avg_coherence:.3f}")
    else:
        print(f"   ‚Ä¢ Calidad general: No evaluable (falta coherencia)")
    
    # Recomendaciones
    print(f"\nüîß RECOMENDACIONES:")
    
    if metrics['coverage'] < 0.7:
        print(f"   ‚Ä¢ Reducir min_cluster_size para mayor cobertura")
    
    if metrics['topic_diversity'] < 0.5:
        print(f"   ‚Ä¢ Ajustar par√°metros para mayor diversidad entre t√≥picos")
    
    if metrics['silhouette_score'] < 0.2:
        print(f"   ‚Ä¢ Mejorar separaci√≥n con diferentes embeddings o UMAP")
    
    if all(v == -1 for v in [metrics['coherence_cv'], metrics['coherence_npmi']]):
        print(f"   ‚Ä¢ Verificar tokenizaci√≥n y diccionario para coherencia Gensim")